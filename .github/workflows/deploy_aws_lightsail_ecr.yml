name: Deploy to Lightsail Container Service
run-name: Deploy ${{ github.ref_name }} to ${{ inputs.deployment_target }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target'
        required: true
        default: 'dev1'
        type: choice
        options:
          - dev1
          - prd
          - demo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 15
    environment:
      name: ${{ inputs.deployment_target }}
    env:
      APP_NAME: awesome
      LCS_SERVICE: awesome-${{ inputs.deployment_target }}
      LCS_CONTAINER: awesome-wp
      AWS_REGION: ap-southeast-1
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create valid tag name
        id: create-tag-name
        run: |
          TAG_NAME="${GITHUB_REF_NAME//\//-}"    
          TAG_NAME="${TAG_NAME//_/-}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Set Environment Variables
        run: |
          IMAGE_TAG="${{ steps.create-tag-name.outputs.tag_name }}-${{ github.run_number }}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ENVIRONMENT=$(echo ${{ inputs.deployment_target }} | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
      
      - name: Install Lightsail CLI Plugin
        run: |
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
      
      - name: Retrieve secrets from SSM Parameter Store
        id: get-ssm-secrets
        run: |
          # Fetch all parameters under the path
          PARAMS=$(aws ssm get-parameters-by-path \
            --path "/${{ env.APP_NAME }}/${{ inputs.deployment_target }}/" \
            --with-decryption \
            --query "Parameters[].{Key:Name,Val:Value}" \
            --output text)
          
          while read -r full_key value; do
            key=$(basename "$full_key")   

            if [[ "$key" == BASIC_* || "$key" == ASSETS_* ]]; then       
              # Export to environment
              echo "$key=$value" >> $GITHUB_ENV
            fi

            # Mask sensitive values
            if [[ "$key" =~ PASSWORD|PASS|KEY|USER|HOST|AUTH|SALT ]]; then
              echo "::add-mask::$value"
            fi
          done <<< "$PARAMS"
            
      - name: Generate htpasswd hash 
        id: htpasswd-hash
        run: |
          AUTH_LINE=$(htpasswd -nb "$BASIC_AUTH_USER" "$BASIC_AUTH_PASSWORD")
          BASIC_AUTH_HASH="${AUTH_LINE#*:}"

          echo "::add-mask::$BASIC_AUTH_HASH"
          echo "BASIC_AUTH_PASSWORD=$BASIC_AUTH_HASH" >> $GITHUB_ENV
          
      - name: Build Docker Image
        id: build-image
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.LCS_SERVICE }}:${{ env.IMAGE_TAG }}"
          docker build \
            --build-arg ENV=${{ inputs.deployment_target }} \
            --build-arg FQDN=${{ vars.DOMAIN }} \
            --build-arg BASIC_AUTH_USER=$BASIC_AUTH_USER \
            --build-arg ASSETS_URL=$ASSETS_URL \
            --build-arg BASIC_AUTH_PASSWORD=$BASIC_AUTH_PASSWORD \
            -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Retrieve container definition
        run: |
          aws ssm get-parameter \
            --name "/${{ env.APP_NAME }}/${{ inputs.deployment_target }}/CONTAINER_DEFINITION" \
            --with-decryption \
            --query "Parameter.Value" \
            --output text > ssm_container.json

      - name: Replace ECR image for container json
        run: |
          sed "s|REPLACE_ECR_IMAGE|${{ steps.build-image.outputs.image }}|g" ssm_container.json > container.json
          echo "== Replaced container.json content =="
          cat container.json
          
      - name: Deploy to Lightsail Container Service
        run: |
          aws lightsail create-container-service-deployment \
            --service-name ${{ env.LCS_SERVICE }} \
            --cli-input-json file://container.json > /dev/null

